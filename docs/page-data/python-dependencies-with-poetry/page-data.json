{"componentChunkName":"component---src-templates-blog-post-js","path":"/python-dependencies-with-poetry/","result":{"data":{"site":{"siteMetadata":{"title":"Donald's Blog"}},"markdownRemark":{"id":"0100d6dd-fc7d-5c91-99a0-816ad010fa96","excerpt":"使用 pip  用来记录项目所有的依赖包和版本号，只需要一个简单的 pip 命令就能完成。 生成的文件会像这个样子 然后就可以用 来一次性安装 requirements.txt 里面所有的依赖包，真是非常方便。 使用 Python3 的 venv 创建虚拟环境 激活虚拟环境 使用 poetry…","html":"<h2>使用 pip</h2>\n<p><code class=\"language-text\">requirements.txt</code> 用来记录项目所有的依赖包和版本号，只需要一个简单的 pip 命令就能完成。</p>\n<div class=\"gatsby-highlight\" data-language=\"shellscript\"><pre class=\"language-shellscript\"><code class=\"language-shellscript\">pip freeze &gt; requirements.txt</code></pre></div>\n<p>生成的文件会像这个样子</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">alembic==1.0.10\nblinker==1.4\nClick==7.0\ndominate==2.3.5\nFlask==1.0.3</code></pre></div>\n<p>然后就可以用</p>\n<div class=\"gatsby-highlight\" data-language=\"shellscript\"><pre class=\"language-shellscript\"><code class=\"language-shellscript\">pip install -r requirements.txt</code></pre></div>\n<p>来一次性安装 requirements.txt 里面所有的依赖包，真是非常方便。</p>\n<h2>使用 Python3 的 venv</h2>\n<p>创建虚拟环境</p>\n<div class=\"gatsby-highlight\" data-language=\"shellscript\"><pre class=\"language-shellscript\"><code class=\"language-shellscript\">python -m venv env</code></pre></div>\n<p>激活虚拟环境</p>\n<div class=\"gatsby-highlight\" data-language=\"shellscript\"><pre class=\"language-shellscript\"><code class=\"language-shellscript\">. env/bin/activate</code></pre></div>\n<h2>使用 poetry 包管理</h2>\n<p><code class=\"language-text\">poetry</code> 的工作方式就像 Node.js 里的 npm/yarn。</p>\n<p>首先用 <code class=\"language-text\">pip install poetry</code> 来安装它，可以用 <code class=\"language-text\">poetry new [name]</code> 来生成新项目，或者在项目的根目录下面运行 <code class=\"language-text\">poetry init</code> 来初始化。</p>\n<p>这样 <code class=\"language-text\">poetry</code> 会在这个项目里创建一个 <code class=\"language-text\">pyproject.toml</code> 的文件，就像 <code class=\"language-text\">package.json</code> 一样，里面记录了项目所有的依赖包版本信息。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[tool.poetry]\nname = &quot;my-package&quot;\nversion = &quot;0.1.0&quot;\ndescription = &quot;The description of the package&quot;\n\n[tool.poetry.dependencies]\npython = &quot;~2.7 || ^3.2&quot;  # Compatible python versions must be declared here\ntoml = &quot;^0.9&quot;\n\n[tool.poetry.dev-dependencies]\npytest = &quot;^3.0&quot;\n\n[tool.poetry.scripts]\nmy-script = &#39;my_package:main&#39;</code></pre></div>\n<p><code class=\"language-text\">poetry install</code> 可以一键安装所有依赖包，还会生成 <code class=\"language-text\">poetry.lock</code> 文件，里面记录了这次安装时的依赖包。<code class=\"language-text\">poetry install --no-dev</code> 可以只安装生产环境的包，不安装开发环境的包。</p>\n<p>在 <code class=\"language-text\">poetry add [name]</code> 可以安装 Flask 到生产环境，比如 <code class=\"language-text\">poetry add flask</code>，再加 <code class=\"language-text\">--dev</code> 参数，<code class=\"language-text\">poetry add --dev flask</code> 就会安装到开发环境。</p>\n<p><code class=\"language-text\">poetry remove [name]</code> 可以卸载依赖包，<code class=\"language-text\">poetry show</code> 可以显式安装好的包。</p>\n<p>更多用法请查看 <a href=\"https://github.com/sdispater/poetry\">poetry</a>。</p>","frontmatter":{"title":"Python 一键安装全部依赖包","date":"October 15, 2017","description":""}}},"pageContext":{"slug":"/python-dependencies-with-poetry/","previous":null,"next":{"fields":{"slug":"/javascript-double-equal-vs-triple-equal/"},"frontmatter":{"title":"JavaScript 中 == 和 === 的区别"}}}}}