{"componentChunkName":"component---src-templates-blog-post-js","path":"/test-javascript-with-jest/","result":{"data":{"site":{"siteMetadata":{"title":"Donald's Blog"}},"markdownRemark":{"id":"5bcb299c-a1a8-5c20-8779-e50e71de2f20","excerpt":"一般我们不管是做前端还是后端，为了提高代码的质量，会选择一种测试驱动开发（TDD）的办法来写代码进行单元测试。Jest 是 Facebook 团队开发的一款测试框架，为的是提高开发者的“开发体验”。我们做单元测试的时候需要分解出一个个独立的模块，但是这样做要写很多的 mock…","html":"<blockquote>\n<p>一般我们不管是做前端还是后端，为了提高代码的质量，会选择一种测试驱动开发（TDD）的办法来写代码进行单元测试。Jest 是 Facebook 团队开发的一款测试框架，为的是提高开发者的“开发体验”。我们做单元测试的时候需要分解出一个个独立的模块，但是这样做要写很多的 mock 代码（模拟的辅助函数），非常地繁琐，这是行业的一个“痛点”。如果你和我一样很懒，而且认同“懒惰即是美德”、“不要重复你自己（DRY）”这些原则的话，那么 Jest 测试框架就是你最好的选择。如果你用过一些其他测试框架比如 Mocha 和 Jasmine 的话，看一下 Jest 文档就马上会用了。</p>\n</blockquote>\n<h1>Jest 特性</h1>\n<ul>\n<li>性能非常好，快速反馈</li>\n<li>用法非常简单，3 分钟快速上手</li>\n<li>容易安装和运行，无需任何配置</li>\n<li>自带覆盖率统计工具</li>\n<li>可以在沙盒环境运行</li>\n<li>自动 watch 你的代码变动并运行测试</li>\n<li>自动 mock 函数</li>\n<li>其他测试框架都没有的快照（snapshot）测试</li>\n<li>非常简单地就能测试异步代码</li>\n<li>Vue,Angular,React 框架等等都能用</li>\n</ul>\n<h1>安装</h1>\n<p>使用熟悉的 npm</p>\n<div class=\"gatsby-highlight\" data-language=\"shellscripts\"><pre class=\"language-shellscripts\"><code class=\"language-shellscripts\">npm install --save-dev jest</code></pre></div>\n<p>或者也可以试一下用 Yarn，总之二选一</p>\n<div class=\"gatsby-highlight\" data-language=\"shellscript\"><pre class=\"language-shellscript\"><code class=\"language-shellscript\">yarn add --dev jest</code></pre></div>\n<p>然后在项目根目录的 <code class=\"language-text\">package.json</code> 配置里面加上这句</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&quot;scripts&quot;: {\n    &quot;test&quot;: &quot;jest&quot;\n}</code></pre></div>\n<h1>快速上手的例子</h1>\n<p>引用一下 <a href=\"http://facebook.github.io/jest/docs/en/getting-started.html\">Jest 官网</a>的例子。假设我们要写一个加法函数，TDD 开发流程第 1 步，先写测试，注意名字要带有 <code class=\"language-text\">test</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// sum.test.js</span>\n<span class=\"token comment\">// 导入代码文件，test函数第1个参数是要显示的文字信息，第2个回调函数里面写测试</span>\n<span class=\"token comment\">// expect期望 加法函数 toBe正确的结果</span>\n<span class=\"token keyword\">const</span> sum <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./sum\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1加2等于3\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>TDD 开发流程第 2 步，我们用 <code class=\"language-text\">npm test</code> 来运行测试，毫无疑问这个测试会失败，因为要测试的函数根本不存在。这是非常正确的做法，因为我们如果要成功，先要学会失败。\nTDD 开发流程第 3 步，现在再来实现这个加法函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// sum.js</span>\n<span class=\"token comment\">// 文件名很重要，你发现命名规律了吗？</span>\n<span class=\"token comment\">// 和测试放在同一个目录，并且要导出</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">;</span></code></pre></div>\n<p>然后可以再次运行 <code class=\"language-text\">npm test</code> 来看测试结果：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">PASS  ./sum.test.js\n✓ 1加2等于3 (5ms)</code></pre></div>\n<p>TDD 开发流程第 4 步，不断强化你的测试，然后又强化你的代码，重复这 4 个步骤。所谓道高一尺，魔高一丈，测试和代码都会逐渐变得符合你的需求。</p>\n<blockquote>\n<p>这篇只是 Jest 入门教程，只讲了一个非常简单的例子，人人都会写，想要了解更多，可以去 Jest 官网<a href=\"http://facebook.github.io/jest%E6%9F%A5%E7%9C%8B%E6%96%87%E6%A1%A3%EF%BC%8C%E5%85%A8%E9%83%BD%E6%98%AF%E4%BA%9B%E4%B8%80%E7%9C%8B%E5%B0%B1%E6%87%82%E7%9A%84%E4%BE%8B%E5%AD%90%EF%BC%8C%E4%B8%8D%E4%BC%9A%E6%9C%89%E7%89%B9%E5%88%AB%E6%B7%B1%E5%A5%A5%E7%9A%84%E4%B8%9C%E8%A5%BF%EF%BC%8C%E5%85%A8%E9%83%BD%E9%9D%A0%E4%BD%A0%E7%86%9F%E8%83%BD%E7%94%9F%E5%B7%A7%E3%80%82\">http://facebook.github.io/jest查看文档，全都是些一看就懂的例子，不会有特别深奥的东西，全都靠你熟能生巧。</a></p>\n</blockquote>","frontmatter":{"title":"使用 Jest 进行愉快的 JavaScript/TypeScript 测试","date":"January 14, 2018","description":""}}},"pageContext":{"slug":"/test-javascript-with-jest/","previous":{"fields":{"slug":"/vscode-tips/"},"frontmatter":{"title":"前端开发神器 VSCode 使用总结"}},"next":{"fields":{"slug":"/vim-commands/"},"frontmatter":{"title":"学习 Vim 命令总结"}}}}}