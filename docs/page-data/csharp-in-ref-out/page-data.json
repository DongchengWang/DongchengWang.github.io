{"componentChunkName":"component---src-templates-blog-post-js","path":"/csharp-in-ref-out/","result":{"data":{"site":{"siteMetadata":{"title":"Donald's Blog"}},"markdownRemark":{"id":"c877b7c2-a941-57e0-9a14-bd785e5d3016","excerpt":"in，ref 和 out 都是按引用传递参数，但是用途不同，其中 in 表示只传入参数，不能修改参数，out 则必须修改参数，供函数外使用。 参数修饰符 是否按引用传递参数 是否必须初始化 是否可以修改 是否必须修改 in Yes Yes No No ref Yes Yes Yes No out Yes No Yes…","html":"<p>in，ref 和 out 都是按引用传递参数，但是用途不同，其中 in 表示只传入参数，不能修改参数，out 则必须修改参数，供函数外使用。</p>\n<table>\n<thead>\n<tr>\n<th>参数修饰符</th>\n<th>是否按引用传递参数</th>\n<th>是否必须初始化</th>\n<th>是否可以修改</th>\n<th>是否必须修改</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>in</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>No</td>\n<td>No</td>\n</tr>\n<tr>\n<td>ref</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td>out</td>\n<td>Yes</td>\n<td>No</td>\n<td>Yes</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n<p>在使用中需要根据你的用途精心挑选好参数修饰符，而且为了提高可读性，函数的参数的顺序一般按照 in，ref 和 out 的顺序排列。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> c<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">Reference</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">in</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Reference</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">in</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        c <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"C# 中 in，out 和 ref 的区别","date":"May 24, 2020","description":""}}},"pageContext":{"slug":"/csharp-in-ref-out/","previous":{"fields":{"slug":"/why-i-dont-recommend-underbar-in-csharp/"},"frontmatter":{"title":"为什么我不建议在 C# 中用下划线 _ 开头来表示私有字段"}},"next":null}}}