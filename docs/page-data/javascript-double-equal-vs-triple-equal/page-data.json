{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript-double-equal-vs-triple-equal/","result":{"data":{"site":{"siteMetadata":{"title":"Donald's Blog"}},"markdownRemark":{"id":"c47983d3-14c2-5f1f-a415-b4aba1f3479a","excerpt":"和其他语言有些不同，在 JavaScript…","html":"<p>和其他语言有些不同，在 JavaScript 中除了用 <code class=\"language-text\">==</code> 操作符来判断是否相等外，还有一个 <code class=\"language-text\">===</code> 操作符，它们的区别是：<code class=\"language-text\">==</code> 操作符会先将两边的值进行强制类型转换再比较是否相等，而 <code class=\"language-text\">===</code> 操作符不会进行类型转换。<code class=\"language-text\">==</code> 操作符只要求比较两个值是否相等，而 <code class=\"language-text\">===</code> 操作符不仅要求值相等，而且要求类型相同。<code class=\"language-text\">!=</code> 和 <code class=\"language-text\">!==</code> 的区别也是类似的，<code class=\"language-text\">!=</code> 号会做强制类型转换，而 <code class=\"language-text\">!==</code> 不会。</p>\n<p>在 chrome 浏览器的环境下，测试一下就知道了：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token number\">55</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"55\"</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token number\">55</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"55\"</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p>第一个操作数是数值类型的<code class=\"language-text\">55</code>，第二个操作数是字符串类型的<code class=\"language-text\">&quot;55&quot;</code>。当一个操作数是字符串，另一个操作数是数值的时候，操作符<code class=\"language-text\">==</code>会把字符串转换成数值，所以结果就返回了<code class=\"language-text\">true</code>。而<code class=\"language-text\">===</code>不会做强制转换，所以数值类型的<code class=\"language-text\">55</code>和字符串类型的<code class=\"language-text\">&quot;55&quot;</code>当然是不相等的了。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token number\">NaN</span> <span class=\"token operator\">==</span> <span class=\"token number\">NaN</span> <span class=\"token comment\">// false</span>\n\n<span class=\"token number\">NaN</span> <span class=\"token operator\">===</span> <span class=\"token number\">NaN</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p>这里有一个特殊值<code class=\"language-text\">NaN</code>，即 Not a Number，表示非数字，它和任何数做相等比较，包括它自己，都会返回<code class=\"language-text\">false</code>。所以判断<code class=\"language-text\">NaN</code>最好用<code class=\"language-text\">isNaN()</code>函数。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">undefined</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token keyword\">null</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p>还有两个特殊值的比较也是让人觉得难以理解，<code class=\"language-text\">null</code> 用来表示空值，<code class=\"language-text\">undefined</code> 用来表示不存在，但这在实际开发中并没有什么用，而且 == 和 === 对它们的处理也不一样。</p>\n<hr>\n<p>由于 <code class=\"language-text\">==</code> 和 <code class=\"language-text\">!=</code> 带来的隐式类型转换规则非常繁琐，以及为了避免混淆数据类型导致的 bug，我推荐使用 <code class=\"language-text\">===</code> 操作符和 <code class=\"language-text\">!==</code> 操作符。除非你真的非常清楚隐式类型转换规则，否则千万别使用 <code class=\"language-text\">==</code> 和 <code class=\"language-text\">!=</code>。</p>","frontmatter":{"title":"JavaScript 中 == 和 === 的区别","date":"November 07, 2017","description":""}}},"pageContext":{"slug":"/javascript-double-equal-vs-triple-equal/","previous":{"fields":{"slug":"/python-dependencies-with-poetry/"},"frontmatter":{"title":"Python 一键安装全部依赖包"}},"next":{"fields":{"slug":"/vscode-tips/"},"frontmatter":{"title":"前端开发神器 VSCode 使用总结"}}}}}