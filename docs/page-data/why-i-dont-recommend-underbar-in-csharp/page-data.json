{"componentChunkName":"component---src-templates-blog-post-js","path":"/why-i-dont-recommend-underbar-in-csharp/","result":{"data":{"site":{"siteMetadata":{"title":"Donald's Blog"}},"markdownRemark":{"id":"a2d0f29f-28d8-55f5-9103-85755603f676","excerpt":"我在C#官方文档的 使用属性 里看到这种代码： 这段代码里的  是以下划线开头的，用来表示 private。这样做会有什么问题呢？ 项目混合使用了驼峰命名法与下划线命名法，扰乱了阅读代码的视线 不像其他语言（比如 JavaScript），C#本身已经提供了private…","html":"<p>我在C#官方文档的 <a href=\"https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/classes-and-structs/using-properties\">使用属性</a> 里看到这种代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Date</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> _month <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Backing store</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Month\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span> <span class=\"token operator\">=></span> _month<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">set</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                _month <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这段代码里的 <code class=\"language-text\">_month</code> 是以下划线开头的，用来表示 private。这样做会有什么问题呢？</p>\n<ul>\n<li>项目混合使用了驼峰命名法与下划线命名法，扰乱了阅读代码的视线</li>\n<li>不像其他语言（比如 JavaScript），C#本身已经提供了private修饰符，不需要再用下划线 <code class=\"language-text\">_</code> 重复表示 private</li>\n<li>下划线 <code class=\"language-text\">_</code> 已经用来表示 <a href=\"https://docs.microsoft.com/zh-cn/dotnet/csharp/discards\">弃元</a> 的功能了，是不是会造成混淆呢？</li>\n</ul>\n<p>实际上我简单地使用驼峰命名法，不用下划线 <code class=\"language-text\">_</code> 开头，也不会有什么问题。代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Date</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> month <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Backing store</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Month\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span> <span class=\"token operator\">=></span> month<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">set</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                month <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这样看起来更简洁，更容易理解了。下面同样来自官方文档的 <a href=\"https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/classes-and-structs/auto-implemented-properties\">自动实现的属性</a> 里的代码就很不错：</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// This class is mutable. Its data can be modified from</span>\n<span class=\"token comment\">// outside the class.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Customer</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Auto-implemented properties for trivial get and set</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">double</span></span> TotalPurchases <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> CustomerID <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Constructor</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Customer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">double</span></span> purchases<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> ID<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        TotalPurchases <span class=\"token operator\">=</span> purchases<span class=\"token punctuation\">;</span>\n        Name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        CustomerID <span class=\"token operator\">=</span> ID<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Methods</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">GetContactInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"ContactInfo\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">GetTransactionHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"History\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// .. Additional methods, events, etc.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Initialize a new object.</span>\n        <span class=\"token class-name\">Customer</span> cust1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Customer</span><span class=\"token punctuation\">(</span><span class=\"token number\">4987.63</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Northwind\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90108</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Modify a property.</span>\n        cust1<span class=\"token punctuation\">.</span>TotalPurchases <span class=\"token operator\">+=</span> <span class=\"token number\">499.99</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>事实上，只使用驼峰命名法，不要暴露字段而是使用属性与 get/set 访问器，或者是单纯地起个更好的变量名，你总是可以找到办法来避免用下划线 <code class=\"language-text\">_</code> 开头。</p>\n<p>当然啦，如果你的项目早就已经采用了 <a href=\"https://github.com/dotnet/corefx/blob/master/Documentation/coding-guidelines/coding-style.md\">微软推荐的代码风格</a>，那就要和项目保持一致。</p>","frontmatter":{"title":"为什么我不建议在 C# 中用下划线 _ 开头来表示私有字段","date":"February 27, 2020","description":""}}},"pageContext":{"slug":"/why-i-dont-recommend-underbar-in-csharp/","previous":{"fields":{"slug":"/proxy-in-nextjs/"},"frontmatter":{"title":"Next.js 配置接口跨域代理转发"}},"next":{"fields":{"slug":"/csharp-in-ref-out/"},"frontmatter":{"title":"C# 中 in，out 和 ref 的区别"}}}}}